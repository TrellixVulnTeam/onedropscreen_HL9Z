{"ast":null,"code":"var _jsxFileName = \"/home/vrdevchris/rappaSite/frontend/src/components/StripePayment.js\",\n    _s = $RefreshSig$();\n\nimport CardInput from '../components/CardInput';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\nimport { detailsOrder, payOrder } from '../actions/orderActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StripePayment() {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  const userSignin = useSelector(state => state.userSignin);\n  const {\n    userInfo\n  } = userSignin;\n\n  const [payment, setPayment] = state => state.payment;\n\n  const {\n    successPay\n  } = payment;\n  console.log(userInfo);\n\n  const handleSubmit = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:5000/pay', {\n      email: email\n    });\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!');\n      }\n    }\n  };\n\n  const handleSubmitSub = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email\n      }\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:5000/sub', {\n        'payment_method': result.paymentMethod.id,\n        'email': email\n      }); // eslint-disable-next-line camelcase\n\n      const {\n        client_secret,\n        status\n      } = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function (result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error); // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!');\n          }\n        });\n      } else {\n        console.log(\"payment success\"); // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (userInfo) {\n      setEmail(userInfo.email);\n    }\n\n    return () => {};\n  }, [userInfo.email]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stripe-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"stripe-form\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"email-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            type: \"email\",\n            value: email,\n            name: \"email\",\n            id: \"email\",\n            children: userInfo.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(CardInput, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stripe-pay\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stripe-button button primary\",\n        onClick: handleSubmit,\n        children: \"Pay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stripe-button button primary\",\n        onClick: handleSubmitSub,\n        children: \"Subscribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 7\n  }, this);\n}\n\n_s(StripePayment, \"dEkvLJsASXcVwXmzp8Z5J29cmts=\", false, function () {\n  return [useStripe, useElements, useSelector];\n});\n\n_c = StripePayment;\nexport default StripePayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripePayment\");","map":{"version":3,"sources":["/home/vrdevchris/rappaSite/frontend/src/components/StripePayment.js"],"names":["CardInput","useStripe","useElements","CardElement","axios","useEffect","useState","useSelector","useDispatch","ORDER_PAY_RESET","detailsOrder","payOrder","StripePayment","email","setEmail","stripe","elements","userSignin","state","userInfo","payment","setPayment","successPay","console","log","handleSubmit","event","res","post","clientSecret","data","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","message","paymentIntent","status","handleSubmitSub","createPaymentMethod","type","paymentMethod","id","client_secret","then"],"mappings":"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","sourcesContent":["import CardInput from '../components/CardInput';\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { ORDER_PAY_RESET } from '../constants/orderConstants';\nimport { detailsOrder, payOrder } from '../actions/orderActions';\n\n\nfunction StripePayment(){\n\n  const [email, setEmail] = useState('');\n\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const userSignin = useSelector(state => state.userSignin) \n  const { userInfo } = userSignin;  \n\n  const [payment, setPayment] = (state => state.payment);\n  const { successPay } = payment;\n\n  console.log(userInfo);\n\n  const handleSubmit = async (event) => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:5000/pay', {email: email});\n\n    const clientSecret = res.data['client_secret'];\n\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email,\n        },\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!');\n      }\n    }\n  };\n\n  const handleSubmitSub = async (event) => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email,\n      },\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:5000/sub', {'payment_method': result.paymentMethod.id, 'email': email});\n      // eslint-disable-next-line camelcase\n      const {client_secret, status} = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function(result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error);\n            // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!');\n          }\n        });\n      } else {\n        console.log(\"payment success\");       \n        // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n\n\n  useEffect(() => {\n    if(userInfo){\n      setEmail(userInfo.email);\n    }\n    return () => {\n        \n    }\n}, [userInfo.email])\n\n\n  return(\n      <div className=\"stripe-container\">\n        <form className=\"stripe-form\">\n          <ul>\n            <li className=\"email-form\">\n              <label htmlFor=\"email\">\n                Email:\n              </label>\n              <p type=\"email\" value={email} name=\"email\" id=\"email\">{userInfo.email}</p>\n            </li>\n            <li>\n              <CardInput />\n            </li>\n          </ul>\n        </form>\n        <div className=\"stripe-pay\">\n          <button className=\"stripe-button button primary\" onClick={handleSubmit}>\n            Pay\n          </button>\n          <button className=\"stripe-button button primary\" onClick={handleSubmitSub}>\n            Subscribe\n          </button>\n        </div>\n      </div>\n  )\n\n}\n\nexport default StripePayment;\n\n"]},"metadata":{},"sourceType":"module"}