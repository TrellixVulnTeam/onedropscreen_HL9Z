{"ast":null,"code":"import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { TokenExpiredError } from 'jsonwebtoken';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_LOGOUT, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_REQUEST } from '../constants/userConstants';\nimport { userUpdateReducer } from '../reducers/userReducers';\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["/home/vrdevchris/rappaSite/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","TokenExpiredError","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_LOGOUT","USER_UPDATE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_REQUEST","userUpdateReducer","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","register","name","logout","remove","update","userId","getState","userSignin","userInfo","put","headers","Authorization","token"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { TokenExpiredError } from 'jsonwebtoken';\nimport {\n    USER_SIGNIN_REQUEST,\n    USER_SIGNIN_SUCCESS,\n    USER_SIGNIN_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n    USER_LOGOUT,\n    USER_UPDATE_FAIL,\n    USER_UPDATE_SUCCESS,\n    USER_UPDATE_REQUEST,\n} from '../constants/userConstants';\nimport { userUpdateReducer } from '../reducers/userReducers';\n\nconst signin = (email, password) => async (dispatch) => {\n    dispatch({type: USER_SIGNIN_REQUEST, payload: {email, password}})\n    try {\n        const {data} = await Axios.post(\"/api/users/signin\", {email, password})\n        dispatch({type: USER_SIGNIN_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error){\n        dispatch({type: USER_SIGNIN_FAIL, payload: error.message});\n    }\n}\n\nconst register = (name, email, password) => async (dispatch) => {\n    dispatch({type: USER_REGISTER_REQUEST, payload: {name, email, password}})\n    try {\n        const {data} = await Axios.post(\"/api/users/register\", {name, email, password})\n        dispatch({type: USER_REGISTER_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error){\n        dispatch({type: USER_REGISTER_FAIL, payload: error.message});\n    }\n}\n\nconst logout = () => (dispatch) =>{\n    Cookie.remove(\"userInfo\");\n    dispatch({ type: USER_LOGOUT});\n}\n\nconst update = ({userId, name, email, password}) => async (dispatch, getState) => {\n    const { userSignin: { userInfo } } = getState();\n    dispatch({type: USER_UPDATE_REQUEST, payload: {userId, name, email, password}})\n    try {\n        const { data } = await Axios.put(\"/api/users/\" + userId, \n        {name, email, password}, {\n        headers:\n            {\n                 Authorization : 'Bearer ' + userInfo.token\n            }\n        });\n        dispatch({type: USER_UPDATE_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error){\n        dispatch({type: USER_UPDATE_FAIL, payload: error.message});\n    }\n}\n\n\nexport { signin, register, logout, update };"]},"metadata":{},"sourceType":"module"}