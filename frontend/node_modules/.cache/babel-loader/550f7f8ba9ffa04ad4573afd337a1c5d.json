{"ast":null,"code":"var _jsxFileName = \"/home/vrdevchris/rappaSite/frontend/src/Screens/OrderScreenStripe.js\",\n    _s = $RefreshSig$();\n\n// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { detailsOrder, payOrder } from '../actions/orderActions';\n// import Axios from 'axios';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { ORDER_PAY_RESET } from '../constants/orderConstants';\n// import CardInput from '../components/CardInput';\n// import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n// import axios from 'axios';\n// function OrderScreenStripe(props) {\n//   const userSignin = useSelector(state => state.userSignin) \n//   const { userInfo } = userSignin; \n//   const email = useState('');\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const handleSubmit = async (event) => {\n//     if (!stripe || !elements) {\n//       return;\n//     }\n//     const res = await axios.post('http://localhost:5000/pay', {email: email});\n//     const clientSecret = res.data['client_secret'];\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//         billing_details: {\n//           email: (userInfo.email),\n//         },\n//       },\n//     });\n//     if (result.error) {\n//       console.log(result.error.message);\n//     } else {\n//       if (result.paymentIntent.status === 'succeeded') {\n//         console.log('Money is in the bank!');\n//       }\n//     }\n//   };\n//   // \n//   const orderId = props.match.params.id;\n//   const orderDetails = useSelector((state) => state.orderDetails);\n//   const { order, loading, error } = orderDetails;\n//   const orderPay = useSelector((state) => state.orderPay);\n//   const { loading: loadingPay, success: successPay, error: errorPay } = orderPay;\n//   const dispatch = useDispatch();\n//   return loading ? (\n//     <LoadingBox />\n//     ) : error ? (\n//       <MessageBox variant=\"danger\">{error}</MessageBox>\n//     ) : (\n//     <div>\n//       <div className=\"placeorder\">\n//         <div className=\"placeorder-info\">\n//           <div>\n//             <h3>\n//               Shipping\n//           </h3>\n//             <div>\n//               {order.shipping.address}, {order.shipping.city}, {order.shipping.state}\n//               {order.shipping.zipCode}, {order.shipping.country}\n//             </div>\n//           </div>\n//           <div>\n//             <h3>Payment</h3>\n//             <div>\n//               Payment Method: {order.payment.paymentMethod}\n//             </div>\n//             <div>\n//               {order.isPaid ? \"Paid at \" + order.paidAt : \"Not Paid.\"}\n//             </div>\n//           </div>\n//           <div>\n//             <ul className=\"cart-list-container\">\n//               <li>\n//                 <h3>\n//                   Shopping Cart\n//           </h3>\n//                 <div>\n//                   Price\n//           </div>\n//               </li>\n//               {\n//                 order.orderItems.length === 0 ?\n//                   <div>\n//                     Cart is empty\n//           </div>\n//                   :\n//                   order.orderItems.map(item =>\n//                     <li key={item._id}>\n//                       <div className=\"cart-image\">\n//                         <img src={item.image} alt=\"product\" />\n//                       </div>\n//                       <div className=\"cart-name\">\n//                         <div>\n//                           <Link to={\"/product/\" + item.product}>\n//                             {item.name}\n//                           </Link>\n//                         </div>\n//                         <div>\n//                           Qty: {item.qty}\n//                         </div>\n//                       </div>\n//                       <div className=\"cart-price\">\n//                         ${item.price}\n//                       </div>\n//                     </li>\n//                   )\n//               }\n//             </ul>\n//           </div>\n//         </div>\n//         <div className=\"placeorder-action\">\n//           <ul>\n//             <li>\n//             <CardInput />\n//             <button onClick={handleSubmit}>\n//             Pay\n//             </button>\n//               <h3>Order Summary</h3>\n//             </li>\n//             <li>\n//               <div>Items</div>\n//               <div>${order.itemsPrice}</div>\n//             </li>\n//             <li>\n//               <div>Shipping</div>\n//               <div>${order.shippingPrice}</div>\n//             </li>\n//             <li>\n//               <div>Tax</div>\n//               <div>${order.taxPrice}</div>\n//             </li>\n//             <li>\n//               <div>Order Total</div>\n//               <div>${order.totalPrice}</div>\n//             </li>\n//           </ul>\n//         </div>\n//       </div>\n//     </div>\n// )}\n// export default OrderScreenStripe;\nimport React, { useState } from 'react';\nimport axios from 'axios'; // stripe\n\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // Custom Components\n\nimport CardInput from '../components/CardInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction OrderScreenStripe() {\n  _s();\n\n  // State\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:4000/pay', {\n      email: email\n    });\n    const clientSecret = res.data['client_secret'];\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email\n        }\n      }\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!'); // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  const handleSubmitSub = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email\n      }\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:4000/sub', {\n        'payment_method': result.paymentMethod.id,\n        'email': email\n      }); // eslint-disable-next-line camelcase\n\n      const {\n        client_secret,\n        status\n      } = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function (result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error); // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!'); // Show a success message to your customer\n          }\n        });\n      } else {\n        console.log('You got the money!'); // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              value: email,\n              name: \"email\",\n              id: \"email\",\n              onChange: e => setEmail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Pay\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmitSub,\n          children: \"Subscription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n}\n\n_s(OrderScreenStripe, \"4AJYP05q6mhSWT8JrUQ3pjdtTFg=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = OrderScreenStripe;\nexport default OrderScreenStripe;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrderScreenStripe\");","map":{"version":3,"sources":["/home/vrdevchris/rappaSite/frontend/src/Screens/OrderScreenStripe.js"],"names":["React","useState","axios","useStripe","useElements","CardElement","CardInput","OrderScreenStripe","email","setEmail","stripe","elements","handleSubmit","event","res","post","clientSecret","data","result","confirmCardPayment","payment_method","card","getElement","billing_details","error","console","log","message","paymentIntent","status","handleSubmitSub","createPaymentMethod","type","paymentMethod","id","client_secret","then","e","target","value"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AAEA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,SAAR,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAkD,yBAAlD,C,CACA;;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAGA,SAASC,iBAAT,GAA6B;AAAA;;AAC3B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMS,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;;AAEA,QAAMQ,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC,QAAI,CAACH,MAAD,IAAW,CAACC,QAAhB,EAA0B;AACxB;AACA;AACA;AACD;;AAED,UAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACa,IAAN,CAA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","sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Link } from 'react-router-dom';\n// import { detailsOrder, payOrder } from '../actions/orderActions';\n// import Axios from 'axios';\n// import LoadingBox from '../components/LoadingBox';\n// import MessageBox from '../components/MessageBox';\n// import { ORDER_PAY_RESET } from '../constants/orderConstants';\n\n\n\n// import CardInput from '../components/CardInput';\n// import {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n// import axios from 'axios';\n\n\n\n\n// function OrderScreenStripe(props) {\n\n\n\n//   const userSignin = useSelector(state => state.userSignin) \n//   const { userInfo } = userSignin; \n\n//   const email = useState('');\n\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const handleSubmit = async (event) => {\n//     if (!stripe || !elements) {\n\n//       return;\n//     }\n\n//     const res = await axios.post('http://localhost:5000/pay', {email: email});\n\n//     const clientSecret = res.data['client_secret'];\n\n//     const result = await stripe.confirmCardPayment(clientSecret, {\n//       payment_method: {\n//         card: elements.getElement(CardElement),\n//         billing_details: {\n//           email: (userInfo.email),\n//         },\n//       },\n//     });\n\n//     if (result.error) {\n\n//       console.log(result.error.message);\n//     } else {\n\n//       if (result.paymentIntent.status === 'succeeded') {\n//         console.log('Money is in the bank!');\n\n//       }\n//     }\n//   };\n\n\n//   // \n//   const orderId = props.match.params.id;\n\n//   const orderDetails = useSelector((state) => state.orderDetails);\n//   const { order, loading, error } = orderDetails;\n\n//   const orderPay = useSelector((state) => state.orderPay);\n//   const { loading: loadingPay, success: successPay, error: errorPay } = orderPay;\n//   const dispatch = useDispatch();\n\n\n\n//   return loading ? (\n//     <LoadingBox />\n//     ) : error ? (\n//       <MessageBox variant=\"danger\">{error}</MessageBox>\n//     ) : (\n\n//     <div>\n//       <div className=\"placeorder\">\n//         <div className=\"placeorder-info\">\n//           <div>\n//             <h3>\n//               Shipping\n//           </h3>\n//             <div>\n//               {order.shipping.address}, {order.shipping.city}, {order.shipping.state}\n//               {order.shipping.zipCode}, {order.shipping.country}\n//             </div>\n            \n//           </div>\n//           <div>\n//             <h3>Payment</h3>\n//             <div>\n//               Payment Method: {order.payment.paymentMethod}\n//             </div>\n//             <div>\n//               {order.isPaid ? \"Paid at \" + order.paidAt : \"Not Paid.\"}\n//             </div>\n//           </div>\n//           <div>\n//             <ul className=\"cart-list-container\">\n//               <li>\n//                 <h3>\n//                   Shopping Cart\n//           </h3>\n//                 <div>\n//                   Price\n//           </div>\n//               </li>\n//               {\n//                 order.orderItems.length === 0 ?\n//                   <div>\n//                     Cart is empty\n//           </div>\n//                   :\n//                   order.orderItems.map(item =>\n//                     <li key={item._id}>\n//                       <div className=\"cart-image\">\n//                         <img src={item.image} alt=\"product\" />\n//                       </div>\n//                       <div className=\"cart-name\">\n//                         <div>\n//                           <Link to={\"/product/\" + item.product}>\n//                             {item.name}\n//                           </Link>\n\n//                         </div>\n//                         <div>\n//                           Qty: {item.qty}\n//                         </div>\n//                       </div>\n//                       <div className=\"cart-price\">\n//                         ${item.price}\n//                       </div>\n//                     </li>\n//                   )\n//               }\n//             </ul>\n//           </div>\n\n\n//         </div>\n//         <div className=\"placeorder-action\">\n//           <ul>\n//             <li>\n//             <CardInput />\n//             <button onClick={handleSubmit}>\n//             Pay\n//             </button>\n\n//               <h3>Order Summary</h3>\n//             </li>\n//             <li>\n//               <div>Items</div>\n//               <div>${order.itemsPrice}</div>\n//             </li>\n//             <li>\n//               <div>Shipping</div>\n//               <div>${order.shippingPrice}</div>\n//             </li>\n//             <li>\n//               <div>Tax</div>\n//               <div>${order.taxPrice}</div>\n//             </li>\n//             <li>\n//               <div>Order Total</div>\n//               <div>${order.totalPrice}</div>\n//             </li>\n//           </ul>\n\n\n\n//         </div>\n\n//       </div>\n//     </div>\n\n// )}\n\n// export default OrderScreenStripe;\n\nimport React, {useState} from 'react';\nimport axios from 'axios';\n// stripe\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\n// Custom Components\nimport CardInput from '../components/CardInput';\n\n\nfunction OrderScreenStripe() {\n  // State\n  const [email, setEmail] = useState('');\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async (event) => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const res = await axios.post('http://localhost:4000/pay', {email: email});\n\n    const clientSecret = res.data['client_secret'];\n\n    const result = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          email: email,\n        },\n      },\n    });\n\n    if (result.error) {\n      // Show error to your customer (e.g., insufficient funds)\n      console.log(result.error.message);\n    } else {\n      // The payment has been processed!\n      if (result.paymentIntent.status === 'succeeded') {\n        console.log('Money is in the bank!');\n        // Show a success message to your customer\n        // There's a risk of the customer closing the window before callback\n        // execution. Set up a webhook or plugin to listen for the\n        // payment_intent.succeeded event that handles any business critical\n        // post-payment actions.\n      }\n    }\n  };\n\n  const handleSubmitSub = async (event) => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email,\n      },\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('http://localhost:4000/sub', {'payment_method': result.paymentMethod.id, 'email': email});\n      // eslint-disable-next-line camelcase\n      const {client_secret, status} = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function(result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error);\n            // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!');\n            // Show a success message to your customer\n          }\n        });\n      } else {\n        console.log('You got the money!');\n        // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"form\">\n        <form>\n          <ul>\n            <li>\n              <label htmlFor=\"email\">\n                Email\n              </label>\n              <input type=\"email\" value={email} name=\"email\" id=\"email\" onChange={(e) => setEmail(e.target.value)}></input>\n            </li>\n          </ul>\n        </form>\n        <CardInput />\n        <div>\n          <button onClick={handleSubmit}>\n            Pay\n          </button>\n          <button onClick={handleSubmitSub}>\n            Subscription\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default OrderScreenStripe;"]},"metadata":{},"sourceType":"module"}